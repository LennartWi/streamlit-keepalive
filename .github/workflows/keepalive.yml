name: keep-and-wake-streamlit

on:
  schedule:
    - cron: "11 */8 * * *"     # alle 8 Stunden, leicht versetzt
  workflow_dispatch:

jobs:
  keep_and_wake:
    runs-on: ubuntu-latest
    steps:
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Playwright
        run: |
          npm init -y
          npm install playwright@1
          npx playwright install --with-deps chromium

      - name: Create script
        run: |
          cat > wake.mjs << 'EOF'
          import { chromium } from "playwright";

          const URLS = [
            "https://solarspitzengesetz-rechner.streamlit.app",
            "https://evo-rechner.streamlit.app",
            "https://atnnschwellenrechnersimpel.streamlit.app",
            "https://pv-profil-generator.streamlit.app",
            "https://schwellenwert-rechner-atypische-netznutzung.streamlit.app",
            "https://temperatur-stunden.streamlit.app",
            "https://wandlermesser.streamlit.app"
          ];

          const UA =
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Safari/605.1.15";
          const PAGE_TIMEOUT = 45000;

          const run = async () => {
            const browser = await chromium.launch({
              headless: true,
              args: ["--no-sandbox","--disable-dev-shm-usage"]
            });
            const context = await browser.newContext({
              userAgent: UA,
              viewport: { width: 1366, height: 850 },
              javaScriptEnabled: true
            });

            for (const base of URLS) {
              const page = await context.newPage();
              const url = `${base}/?embed=true&keepalive=${Date.now()}`;
              console.log(`▶ ${base}`);

              try {
                // 1) Präventiv "echter Besuch"
                await page.goto(url, { waitUntil: "networkidle", timeout: PAGE_TIMEOUT });

                // Prüfen ob App schon gerendert ist
                const rendered = await page.$('[data-testid="stAppViewContainer"]');
                if (rendered) {
                  console.log("  OK: rendered");
                } else {
                  // 2) Schlafseite erkannt? Button klicken
                  const sleeping =
                    (await page.locator('text=Zzzz').first().count()) > 0 ||
                    (await page.locator('text=This app has gone to sleep').first().count()) > 0 ||
                    (await page.locator('text=Yes, get this app back up!').first().count()) > 0;

                  if (sleeping) {
                    console.log("  Sleep page detected → clicking wake button");
                    const btn =
                      page.getByRole?.("button", { name: /get this app back up/i }) ||
                      page.locator('text=Yes, get this app back up!');

                    try {
                      await btn.first().click({ timeout: 10000 });
                    } catch {
                      // Fallback: drücke Enter, falls Button im Fokus ist
                      await page.keyboard.press("Enter").catch(() => {});
                    }

                    // Warten bis die App anfängt zu rendern
                    await page.waitForSelector('[data-testid="stAppViewContainer"]', { timeout: 60000 });
                    console.log("  WOKE: app container visible");
                  } else {
                    console.log("  No container yet but not a sleep page");
                  }
                }

                // kleiner zweiter Touch auf Basis URL
                await page.goto(base + "/", { waitUntil: "domcontentloaded", timeout: PAGE_TIMEOUT });
                await page.waitForTimeout(1500);
                console.log("  Touch done");
              } catch (e) {
                console.log(`  WARN: ${e.message}`);
              } finally {
                await page.close();
              }
            }

            await context.close();
            await browser.close();
          };

          run();
          EOF

      - name: Run
        run: node wake.mjs
